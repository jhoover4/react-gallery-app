{"version":3,"sources":["components/Nav.js","components/Loading.js","components/NotFound.js","components/PhotoGallery.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","Loading","NotFound","PhotoGallery","flickrApiKey","process","photosPerPage","state","photos","search","this","props","match","params","_getPhotos","prevProps","searchString","loading","_retrievePhotoData","then","setState","flickrRoute","fetch","response","json","myJson","_makePhotoUrls","photo","photoJson","item","photoUrl","id","url","farm","server","secret","title","push","map","key","src","alt","length","photoGalleryHtml","Component","Search","handleSubmit","e","preventDefault","searchTerm","searchInput","value","toLowerCase","history","onSubmit","type","name","placeholder","required","ref","input","fill","height","viewBox","width","xmlns","d","withRouter","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.30d38bb8.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Nav = () => {\n  return (\n    <nav className=\"main-nav\">\n      <ul>\n        <li>\n          <NavLink to=\"/cats\">Cats</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/dogs\">Dogs</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/elephants\">Elephants</NavLink>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return (\n    <li className=\"not-found\">\n      <h3>No Results Found</h3>\n      <p>You search did not return any results. Please try again.</p>\n    </li>\n  );\n};\n\nexport default NotFound;\n","import React, { Component } from \"react\";\nimport Loading from \"./Loading\";\nimport NotFound from \"./NotFound\";\n\nclass PhotoGallery extends Component {\n  flickrApiKey = process.env.REACT_APP_FLICKR_API_KEY;\n  photosPerPage = 24;\n\n  constructor() {\n    super();\n    this.state = { photos: [] };\n  }\n\n  componentDidMount() {\n    const search = this.props.match.params.search;\n\n    this._getPhotos(search);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.match.params.search !== this.props.match.params.search) {\n      const search = this.props.match.params.search;\n      this._getPhotos(search);\n    }\n  }\n\n  _getPhotos(searchString) {\n    if (!searchString) {\n      this.setState({ photos: [] });\n    } else {\n      this.loading = true;\n      this._retrievePhotoData(searchString).then(photos => {\n        this.loading = false;\n        this.setState({ photos });\n      });\n    }\n  }\n\n  /**\n   * Gets photo data from the flickr api, filtered by the provided search string.\n   *\n   * @param {string} searchString - Filters photo data.\n   * @private\n   *\n   * @returns (Promise|Array)\n   */\n  async _retrievePhotoData(searchString) {\n    const flickrRoute = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${this.flickrApiKey}&content_type=&per_page=${this.photosPerPage}&tags=${searchString}&format=json&nojsoncallback=1`;\n\n    try {\n      const response = await fetch(flickrRoute);\n      const myJson = await response.json();\n      return this._makePhotoUrls(myJson.photos.photo);\n    } catch {\n      return [];\n    }\n  }\n\n  async _makePhotoUrls(photoJson) {\n    const photos = [];\n\n    for (let item of photoJson) {\n      let photoUrl = {\n        id: item.id,\n        url: `https://farm${item.farm}.staticflickr.com/${item.server}/${item.id}_${item.secret}.jpg`,\n        title: item.title\n      };\n      photos.push(photoUrl);\n    }\n\n    return photos;\n  }\n\n  photoGalleryHtml() {\n    return !this.loading ? (\n      <ul>\n        {this.state.photos.map(photo => {\n          return (\n            <li key={photo.id}>\n              <img src={photo.url} alt={photo.title} />\n            </li>\n          );\n        })}\n      </ul>\n    ) : (\n      <Loading></Loading>\n    );\n  }\n\n  render() {\n    return this.state.photos.length ? (\n      this.photoGalleryHtml()\n    ) : (\n      <NotFound></NotFound>\n    );\n  }\n}\n\nexport default PhotoGallery;\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Search extends Component {\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const searchTerm = this.searchInput.value.toLowerCase();\n\n    this.searchInput.value = \"\";\n\n    this.props.history.push(`/${searchTerm}`);\n  };\n\n  render() {\n    return (\n      <form className=\"search-form\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"search\"\n          name=\"search\"\n          placeholder=\"Search\"\n          required\n          ref={input => (this.searchInput = input)}\n        />\n        <button type=\"submit\" className=\"search-button\">\n          <svg\n            fill=\"#fff\"\n            height=\"24\"\n            viewBox=\"0 0 23 23\"\n            width=\"24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n            <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n          </svg>\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Search);\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Nav from \"./components/Nav\";\nimport PhotoGallery from \"./components/PhotoGallery\";\nimport Search from \"./components/Search\";\nimport NotFound from \"./components/NotFound\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Search />\n        <Nav />\n\n        <div className=\"photo-container\">\n          <h2>Results</h2>\n          <Switch>\n            <Route exact path=\"/:search?\" component={PhotoGallery} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}